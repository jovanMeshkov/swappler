@using Swappler.Utilities
@using Swappler.Models

@model CreateSwapRequestViewModel

@{
    ViewBag.Title = "CreateSwapRequest";
    Layout = "~/Views/Shared/MasterLayout.cshtml";
}
@*<div class="row">
        <div class="col-md-offset-4">
            <div class="page-header" id="exchange-header">
                <h2>Exchange items <small>Get better deal for your item</small></h2>
            </div>
        </div>

    </div>*@
<div class="row">
   
    <div class="col-md-offset-2  col-md-3">

        @* Requested Swap Item *@
        <div class="col-item">

            <div class="photo">
                <img src="@Model.RequestedSwapItem.PhotoUrl" class="img-responsive" alt="" />
            </div>

            <div class="info">
                <div class="row">
                    <div class="price col-md-4">
                        <h5>
                            @Model.RequestedSwapItem.Name
                        </h5>
                        @*<h5 class="price-text-color">
                                $199.99
                            </h5>*@
                    </div>
                </div>
                <div class="separator clear-left">
                    <p class="btn-add">
                        <i class="glyphicon glyphicon-shopping-cart"></i><a href="#" class="hidden-sm">Swap this</a>
                    </p>
                    <p class="btn-details">
                        <i class="glyphicon glyphicon-list"></i><a href="#" class="hidden-sm">More details</a>
                    </p>
                </div>
                <div class="clearfix">
                </div>
            </div>
        </div>
    </div>
    @* Additional money *@
    <div class="col-md-2" style="margin-top:8em;">
        <div class="form-group">
            @*<label class="control-label">Colorful:</label>*@
            <input id="colorful" class="form-control" type="number" value="1" min="1" max="100000000" />
        </div>
        <button class="btn btn-success btn-block">Swap this</button>
    </div>
    @* Swap Request Swap item offer*@
    <div class="col-md-3">
        <div id="swap-request-swap-item-offer" class="col-item ">
            <div class="photo">
                <img src="http://placehold.it/350x260" class="swap-item-offer-photo img-responsive" alt="" />
            </div>
            <div class="info">
                <div class="row">
                    <div class="price col-md-4">
                        <h5 class="swap-item-offer-name">
                            @Model.RequestedSwapItem.Name
                        </h5>
                        @*<h5 class="price-text-color">
                            $199.99
                        </h5>*@
                    </div>
                </div>
                <div class="separator clear-left">
                    <p class="btn-add">
                        <i class="glyphicon glyphicon-shopping-cart"></i><a href="#" class="hidden-sm">Swap this</a>
                    </p>
                    <p class="btn-details">
                        <i class="glyphicon glyphicon-list"></i><a href="#" class="hidden-sm">More details</a>
                    </p>
                </div>
                <div class="clearfix">
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-offset-5"><h2><small>Other items for exchange</small></h2></div>

</div>


<div class="row">
    <div class="col-md-12">
        @Html.Partial("~/Views/Partials/SwapItemsForSwapRequest.cshtml", Model.UserSwapItems);
    </div>
</div>
<script>
    (function ($) {



        $.fn.bootstrapNumber = function (options) {

            var settings = $.extend({
                upClass: 'default',
                downClass: 'default',
                center: true
            }, options);

            return this.each(function (e) {
                var self = $(this);
                var clone = self.clone();

                var min = self.attr('min');
                var max = self.attr('max');

                function setText(n) {
                    if ((min && n < min) || (max && n > max)) {
                        return false;
                    }

                    clone.focus().val(n);
                    return true;
                }

                var group = $("<div class='input-group'></div>");
                var down = $("<button type='button'>-</button>").attr('class', 'btn btn-' + settings.downClass).click(function () {
                    setText(parseInt(clone.val()) - 1);
                });
                var up = $("<button type='button'>+</button>").attr('class', 'btn btn-' + settings.upClass).click(function () {
                    setText(parseInt(clone.val()) + 1);
                });
                $("<span class='input-group-btn'></span>").append(down).appendTo(group);
                clone.appendTo(group);
                if (clone) {
                    clone.css('text-align', 'center');
                }
                $("<span class='input-group-btn'></span>").append(up).appendTo(group);

                // remove spins from original
                clone.prop('type', 'text').keydown(function (e) {
                    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
                        (e.keyCode == 65 && e.ctrlKey === true) ||
                        (e.keyCode >= 35 && e.keyCode <= 39)) {
                        return;
                    }
                    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                        e.preventDefault();
                    }

                    var c = String.fromCharCode(e.which);
                    var n = parseInt(clone.val() + c);

                    //if ((min && n < min) || (max && n > max)) {
                    //    e.preventDefault();
                    //}
                });

                clone.prop('type', 'text').blur(function (e) {
                    var c = String.fromCharCode(e.which);
                    var n = parseInt(clone.val() + c);
                    if ((min && n < min)) {
                        setText(min);
                    }
                    else if (max && n > max) {
                        setText(max);
                    }
                });


                self.replaceWith(group);
            });
        };
        $(".btn-swap-request-choose-swap-item").on("click", function () {
            
            var swapRequestSwapItemOffer = $("#swap-request-swap-item-offer").eq(0);

            var swapRequestChooseItem = $(this).parents(".create-swap-request-choose-swap-item").eq(0);

            var chooseItemId = swapRequestChooseItem.attr("data-id");
            var chooseItemName = swapRequestChooseItem.find(".choose-swap-item-name").eq(0).text();
            var chooseItemImageSrc = swapRequestChooseItem.find(".choose-swap-item-photo").eq(0).attr("src");

            swapRequestSwapItemOffer.attr("data-id", chooseItemId);
            swapRequestSwapItemOffer.find(".swap-item-offer-name").eq(0).text(chooseItemName);
            swapRequestSwapItemOffer.find(".swap-item-offer-photo").eq(0).attr("src",chooseItemImageSrc);

        });

    }(jQuery));

</script>
<script>
    // Remember set you events before call bootstrapSwitch or they will fire after bootstrapSwitch's events
    $("[name='checkbox2']").change(function () {
        if (!confirm('Do you wanna cancel me!')) {
            this.checked = true;
        }
    });

    $('#after').bootstrapNumber();
    $('#colorful').bootstrapNumber({
        upClass: 'success',
        downClass: 'danger'
    });
</script>